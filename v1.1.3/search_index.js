var documenterSearchIndex = {"docs":
[{"location":"loaders/#Loaders","page":"Loaders","title":"Loaders","text":"","category":"section"},{"location":"loaders/","page":"Loaders","title":"Loaders","text":"The primary purpose of NFLData.jl is to load sports data from the NFL into Julia. All functions that load data into Julia are prefixed with load_*(). All files are loaded in as DataFrames.","category":"page"},{"location":"loaders/","page":"Loaders","title":"Loaders","text":"To load a data resource into memory, when a load_*() function is called initially, NFLData.jl downloads the data resource as a .parquet, .csv, or .csv.gz file into a Scratch space. From there, NFLData.jl reads the data into memory as a DataFrame. If the data object is referenced again, then the cached file (from the Scratch space) is read into memory, and the file is not redownloaded unless the cache is cleared. For more information on this behavior, see Caching.","category":"page"},{"location":"loaders/#Available-resources","page":"Loaders","title":"Available resources","text":"","category":"section"},{"location":"loaders/","page":"Loaders","title":"Loaders","text":"The data resources available in NFLData.jl are maintained by the nflverse organization (as is this package). These resources are directly stored in a variety of places, but most commonly as releases in the nflverse/nflverse-data repository. These data resources are typically sourced directly from the NFL and its various APIs, but other third party resources are represented as well, such as data from pro-football-reference.com.","category":"page"},{"location":"loaders/","page":"Loaders","title":"Loaders","text":"For a complete list of what resources are available, consult the {nflreadr} documentation–all load_*() functions from {nflreadr} have been implemented in NFLData.jl, and the arguments are all (approximately) the same.","category":"page"},{"location":"loaders/","page":"Loaders","title":"Loaders","text":"Some examples are provided below in terms of how to read and query these load_*() functions.","category":"page"},{"location":"loaders/#Universal-data-resources","page":"Loaders","title":"Universal data resources","text":"","category":"section"},{"location":"loaders/","page":"Loaders","title":"Loaders","text":"Many loaders do not take any arguments, and simply load a data resource into a Julia environment. For example, load_players() simply returns all players in the NFL's database, past and present.","category":"page"},{"location":"loaders/","page":"Loaders","title":"Loaders","text":"julia> using NFLData\n\njulia> load_players()\n20753×32 DataFrame\n   Row │ status   display_name      first_name  last_name  esb_id     gsis_id     birth_da ⋯\n       │ String?  String?           String?     String?    String?    String?     String?  ⋯\n───────┼────────────────────────────────────────────────────────────────────────────────────\n     1 │ RET      'Omar Ellison     'Omar       Ellison    ELL711319  00-0004866  1971-10- ⋯\n     2 │ ACT      A'Shawn Robinson  A'Shawn     Robinson   ROB367960  00-0032889  1995-03-\n     3 │ DEV      A.J. Arcuri       A.J.        Arcuri     ARC716900  00-0037845  1997-08-\n     4 │ ACT      A.J. Barner       A.J.        Barner     BAR235889  00-0039793  2002-05-\n     5 │ RES      A.J. Bouye        Arlandus    Bouye      BOU651714  00-0030228  1991-08- ⋯\n     6 │ ACT      A.J. Brown        Arthur      Brown      BRO413223  00-0035676  1997-06-\n     7 │ ACT      A.J. Cann         Aaron       Cann       CAN364949  00-0032255  1991-10-\n     8 │ ACT      A.J. Cole         A.J.        Cole       COL214396  00-0035190  1995-11-\n     9 │ RET      A.J. Cruz         A.J.        Cruz       CRU779150  00-0032270  missing  ⋯\n    10 │ RET      A.J. Dalton       A.J.        Dalton     DAL649400  00-0031108  missing\n    11 │ RET      A.J. Davis        A.J.        Davis      DAV115245  00-0029167  1989-07-\n   ⋮   │    ⋮            ⋮              ⋮           ⋮          ⋮          ⋮           ⋮    ⋱\n 20744 │ DEV      Zion Logue        Zion        Logue      LOG824407  00-0039400  2002-07-\n 20745 │ RET      Zipp Duncan       Zipp        Duncan     DUN383863  00-0027294  missing  ⋯\n 20746 │ RET      Zola Davis        Zola        Davis      DAV815538  00-0004071  1975-01-\n 20747 │ RET      Zoltan Mesko      Zoltan      Mesko      MES280733  00-0027749  1986-03-\n 20748 │ CUT      Zonovan Knight    Zonovan     Knight     KNI764772  00-0037157  2001-04-\n 20749 │ CUT      Zuri Henry        Zuri        Henry      HEN713594  00-0039689  2000-04- ⋯\n 20750 │ RET      Zuriel Smith      Zuriel      Smith      SMI828252  00-0022024  1980-01-\n 20751 │ CUT      Zurlon Tipton     Zurlon      Tipton     TIP645432  00-0030855  1989-04-\n 20752 │ DEV      Zyon Gilbert      Zyon        Gilbert    GIL144859  00-0037373  1999-02-\n 20753 │ ACT      Zyon McCollum     Zyon        McCollum   MCC496223  00-0037268  1999-05- ⋯\n                                                           26 columns and 20732 rows omitted","category":"page"},{"location":"loaders/#Queryable-by-season","page":"Loaders","title":"Queryable by season","text":"","category":"section"},{"location":"loaders/","page":"Loaders","title":"Loaders","text":"Many loaders can query by season. By default, these loaders will return the most recent season of data.","category":"page"},{"location":"loaders/","page":"Loaders","title":"Loaders","text":"julia> load_pbp() # 2024 season thru week 2\n5288×372 DataFrame\n  Row │ play_id   game_id          old_game_id  home_team  away_team  season_type  week    ⋯\n      │ Float64?  String?          String?      String?    String?    String?      Int32?  ⋯\n──────┼─────────────────────────────────────────────────────────────────────────────────────\n    1 │      1.0  2024_01_ARI_BUF  2024090801   BUF        ARI        REG               1  ⋯\n    2 │     40.0  2024_01_ARI_BUF  2024090801   BUF        ARI        REG               1\n    3 │     61.0  2024_01_ARI_BUF  2024090801   BUF        ARI        REG               1\n    4 │     83.0  2024_01_ARI_BUF  2024090801   BUF        ARI        REG               1\n    5 │    108.0  2024_01_ARI_BUF  2024090801   BUF        ARI        REG               1  ⋯\n    6 │    133.0  2024_01_ARI_BUF  2024090801   BUF        ARI        REG               1\n    7 │    155.0  2024_01_ARI_BUF  2024090801   BUF        ARI        REG               1\n    8 │    177.0  2024_01_ARI_BUF  2024090801   BUF        ARI        REG               1\n    9 │    199.0  2024_01_ARI_BUF  2024090801   BUF        ARI        REG               1  ⋯\n   10 │    224.0  2024_01_ARI_BUF  2024090801   BUF        ARI        REG               1\n   11 │    265.0  2024_01_ARI_BUF  2024090801   BUF        ARI        REG               1\n  ⋮   │    ⋮             ⋮              ⋮           ⋮          ⋮           ⋮         ⋮     ⋱\n 5279 │   4104.0  2024_02_TB_DET   2024091503   DET        TB         REG               2\n 5280 │   4130.0  2024_02_TB_DET   2024091503   DET        TB         REG               2  ⋯\n 5281 │   4155.0  2024_02_TB_DET   2024091503   DET        TB         REG               2\n 5282 │   4162.0  2024_02_TB_DET   2024091503   DET        TB         REG               2\n 5283 │   4187.0  2024_02_TB_DET   2024091503   DET        TB         REG               2\n 5284 │   4210.0  2024_02_TB_DET   2024091503   DET        TB         REG               2  ⋯\n 5285 │   4233.0  2024_02_TB_DET   2024091503   DET        TB         REG               2\n 5286 │   4256.0  2024_02_TB_DET   2024091503   DET        TB         REG               2\n 5287 │   4279.0  2024_02_TB_DET   2024091503   DET        TB         REG               2\n 5288 │   4301.0  2024_02_TB_DET   2024091503   DET        TB         REG               2  ⋯\n                                                           365 columns and 5267 rows omitted","category":"page"},{"location":"loaders/","page":"Loaders","title":"Loaders","text":"You can return a different season of data, if available, by passing in the year to query:","category":"page"},{"location":"loaders/","page":"Loaders","title":"Loaders","text":"julia> load_pbp(2023)\n49665×372 DataFrame\n   Row │ play_id   game_id          old_game_id  home_team  away_team  season_type  week   ⋯\n       │ Float64?  String?          String?      String?    String?    String?      Int32? ⋯\n───────┼────────────────────────────────────────────────────────────────────────────────────\n     1 │      1.0  2023_01_ARI_WAS  2023091007   WAS        ARI        REG               1 ⋯\n     2 │     39.0  2023_01_ARI_WAS  2023091007   WAS        ARI        REG               1\n     3 │     55.0  2023_01_ARI_WAS  2023091007   WAS        ARI        REG               1\n     4 │     77.0  2023_01_ARI_WAS  2023091007   WAS        ARI        REG               1\n     5 │    102.0  2023_01_ARI_WAS  2023091007   WAS        ARI        REG               1 ⋯\n     6 │    124.0  2023_01_ARI_WAS  2023091007   WAS        ARI        REG               1\n     7 │    147.0  2023_01_ARI_WAS  2023091007   WAS        ARI        REG               1\n     8 │    172.0  2023_01_ARI_WAS  2023091007   WAS        ARI        REG               1\n     9 │    197.0  2023_01_ARI_WAS  2023091007   WAS        ARI        REG               1 ⋯\n    10 │    220.0  2023_01_ARI_WAS  2023091007   WAS        ARI        REG               1\n    11 │    245.0  2023_01_ARI_WAS  2023091007   WAS        ARI        REG               1\n   ⋮   │    ⋮             ⋮              ⋮           ⋮          ⋮           ⋮         ⋮    ⋱\n 49656 │   4684.0  2023_22_SF_KC    2024021100   KC         SF         POST             22\n 49657 │   4709.0  2023_22_SF_KC    2024021100   KC         SF         POST             22 ⋯\n 49658 │   4734.0  2023_22_SF_KC    2024021100   KC         SF         POST             22\n 49659 │   4771.0  2023_22_SF_KC    2024021100   KC         SF         POST             22\n 49660 │   4759.0  2023_22_SF_KC    2024021100   KC         SF         POST             22\n 49661 │   4791.0  2023_22_SF_KC    2024021100   KC         SF         POST             22 ⋯\n 49662 │   4813.0  2023_22_SF_KC    2024021100   KC         SF         POST             22\n 49663 │   4835.0  2023_22_SF_KC    2024021100   KC         SF         POST             22\n 49664 │   4860.0  2023_22_SF_KC    2024021100   KC         SF         POST             22\n 49665 │   4881.0  2023_22_SF_KC    2024021100   KC         SF         POST             22 ⋯\n                                                          365 columns and 49644 rows omitted","category":"page"},{"location":"loaders/","page":"Loaders","title":"Loaders","text":"To get data for multiple years, pass a range of years into the function.","category":"page"},{"location":"loaders/","page":"Loaders","title":"Loaders","text":"julia> load_pbp(2022:2023)\n99099×372 DataFrame\n   Row │ play_id   game_id          old_game_id  home_team  away_team  season_type  week   ⋯\n       │ Float64?  String?          String?      String?    String?    String?      Int32? ⋯\n───────┼────────────────────────────────────────────────────────────────────────────────────\n     1 │      1.0  2022_01_BAL_NYJ  2022091107   NYJ        BAL        REG               1 ⋯\n     2 │     43.0  2022_01_BAL_NYJ  2022091107   NYJ        BAL        REG               1\n     3 │     68.0  2022_01_BAL_NYJ  2022091107   NYJ        BAL        REG               1\n     4 │     89.0  2022_01_BAL_NYJ  2022091107   NYJ        BAL        REG               1\n     5 │    115.0  2022_01_BAL_NYJ  2022091107   NYJ        BAL        REG               1 ⋯\n     6 │    136.0  2022_01_BAL_NYJ  2022091107   NYJ        BAL        REG               1\n     7 │    172.0  2022_01_BAL_NYJ  2022091107   NYJ        BAL        REG               1\n     8 │    202.0  2022_01_BAL_NYJ  2022091107   NYJ        BAL        REG               1\n     9 │    230.0  2022_01_BAL_NYJ  2022091107   NYJ        BAL        REG               1 ⋯\n    10 │    254.0  2022_01_BAL_NYJ  2022091107   NYJ        BAL        REG               1\n    11 │    275.0  2022_01_BAL_NYJ  2022091107   NYJ        BAL        REG               1\n   ⋮   │    ⋮             ⋮              ⋮           ⋮          ⋮           ⋮         ⋮    ⋱\n 99090 │   4684.0  2023_22_SF_KC    2024021100   KC         SF         POST             22\n 99091 │   4709.0  2023_22_SF_KC    2024021100   KC         SF         POST             22 ⋯\n 99092 │   4734.0  2023_22_SF_KC    2024021100   KC         SF         POST             22\n 99093 │   4771.0  2023_22_SF_KC    2024021100   KC         SF         POST             22\n 99094 │   4759.0  2023_22_SF_KC    2024021100   KC         SF         POST             22\n 99095 │   4791.0  2023_22_SF_KC    2024021100   KC         SF         POST             22 ⋯\n 99096 │   4813.0  2023_22_SF_KC    2024021100   KC         SF         POST             22\n 99097 │   4835.0  2023_22_SF_KC    2024021100   KC         SF         POST             22\n 99098 │   4860.0  2023_22_SF_KC    2024021100   KC         SF         POST             22\n 99099 │   4881.0  2023_22_SF_KC    2024021100   KC         SF         POST             22 ⋯\n                                                          365 columns and 99078 rows omitted","category":"page"},{"location":"loaders/","page":"Loaders","title":"Loaders","text":"To get all years of data for a resource, pass true into the function. Be advised that this may take a few seconds.","category":"page"},{"location":"loaders/","page":"Loaders","title":"Loaders","text":"julia> load_pbp(true)\n1186651×372 DataFrame\n     Row │ play_id   game_id          old_game_id  home_team  away_team  season_type  week ⋯\n         │ Float64?  String?          String?      String?    String?    String?      Int3 ⋯\n─────────┼──────────────────────────────────────────────────────────────────────────────────\n       1 │     35.0  1999_01_ARI_PHI  1999091200   PHI        ARI        REG               ⋯\n       2 │     60.0  1999_01_ARI_PHI  1999091200   PHI        ARI        REG\n       3 │     82.0  1999_01_ARI_PHI  1999091200   PHI        ARI        REG\n       4 │    103.0  1999_01_ARI_PHI  1999091200   PHI        ARI        REG\n       5 │    126.0  1999_01_ARI_PHI  1999091200   PHI        ARI        REG               ⋯\n       6 │    150.0  1999_01_ARI_PHI  1999091200   PHI        ARI        REG\n       7 │    176.0  1999_01_ARI_PHI  1999091200   PHI        ARI        REG\n       8 │    197.0  1999_01_ARI_PHI  1999091200   PHI        ARI        REG\n       9 │    218.0  1999_01_ARI_PHI  1999091200   PHI        ARI        REG               ⋯\n      10 │    240.0  1999_01_ARI_PHI  1999091200   PHI        ARI        REG\n      11 │    260.0  1999_01_ARI_PHI  1999091200   PHI        ARI        REG\n    ⋮    │    ⋮             ⋮              ⋮           ⋮          ⋮           ⋮         ⋮  ⋱\n 1186642 │   4104.0  2024_02_TB_DET   2024091503   DET        TB         REG\n 1186643 │   4130.0  2024_02_TB_DET   2024091503   DET        TB         REG               ⋯\n 1186644 │   4155.0  2024_02_TB_DET   2024091503   DET        TB         REG\n 1186645 │   4162.0  2024_02_TB_DET   2024091503   DET        TB         REG\n 1186646 │   4187.0  2024_02_TB_DET   2024091503   DET        TB         REG\n 1186647 │   4210.0  2024_02_TB_DET   2024091503   DET        TB         REG               ⋯\n 1186648 │   4233.0  2024_02_TB_DET   2024091503   DET        TB         REG\n 1186649 │   4256.0  2024_02_TB_DET   2024091503   DET        TB         REG\n 1186650 │   4279.0  2024_02_TB_DET   2024091503   DET        TB         REG\n 1186651 │   4301.0  2024_02_TB_DET   2024091503   DET        TB         REG               ⋯\n                                                        366 columns and 1186630 rows omitted","category":"page"},{"location":"loaders/","page":"Loaders","title":"Loaders","text":"Trying to query a resource for a year where data is unavailable will throw an error.","category":"page"},{"location":"loaders/","page":"Loaders","title":"Loaders","text":"julia> load_pbp(1995)\nERROR: DomainError with 1995:\nNo NFL PBP data available prior to 1999\\!","category":"page"},{"location":"loaders/#Other-queries","page":"Loaders","title":"Other queries","text":"","category":"section"},{"location":"loaders/","page":"Loaders","title":"Loaders","text":"Some data is available to queried with other parameters. For example, you can query ESPN quarterback rating (QBR) data grouped by season or by week:","category":"page"},{"location":"loaders/","page":"Loaders","title":"Loaders","text":"julia> load_espn_qbr(\"season\") # by season\n1413×23 DataFrame\n  Row │ season  season_type  game_week     team_abb  player_id  name_short         rank    ⋯\n      │ Int32?  String?      String?       String?   String?    String?            Float64 ⋯\n──────┼─────────────────────────────────────────────────────────────────────────────────────\n    1 │   2006  Regular      Season Total  IND       1428       P. Manning               1 ⋯\n    2 │   2006  Regular      Season Total  NE        2330       T. Brady                 2\n    3 │   2006  Regular      Season Total  SD        5529       P. Rivers                3\n    4 │   2006  Regular      Season Total  CIN       4459       C. Palmer                4\n    5 │   2006  Regular      Season Total  NO        2580       D. Brees                 5 ⋯\n    6 │   2006  Regular      Season Total  BAL       733        S. McNair                6\n    7 │   2006  Regular      Season Total  NYJ       2149       C. Pennington            7\n    8 │   2006  Regular      Season Total  DAL       5209       T. Romo                  8\n    9 │   2006  Regular      Season Total  PHI       1753       D. McNabb                9 ⋯\n   10 │   2006  Regular      Season Total  ARI       9596       M. Leinart              10\n   11 │   2006  Regular      Season Total  STL       2299       M. Bulger               11\n  ⋮   │   ⋮          ⋮            ⋮           ⋮          ⋮              ⋮              ⋮   ⋱\n 1404 │   2024  Regular      Season Total  NE        4569173    R. Stevenson       missing\n 1405 │   2024  Regular      Season Total  LV        2576336    A. Abdullah        missing ⋯\n 1406 │   2024  Regular      Season Total  NO        4243322    J. Haener          missing\n 1407 │   2024  Regular      Season Total  CAR       14012      A. Dalton          missing\n 1408 │   2024  Regular      Season Total  MIN       4242431    T. Chandler        missing\n 1409 │   2024  Regular      Season Total  DAL       2972515    C. Rush            missing ⋯\n 1410 │   2024  Regular      Season Total  MIA       4036419    S. Thompson        missing\n 1411 │   2024  Regular      Season Total  KC        4361529    I. Pacheco         missing\n 1412 │   2024  Regular      Season Total  SF        3126486    D. Samuel Sr.      missing\n 1413 │   2024  Regular      Season Total  ARI       4360175    C. Tune            missing ⋯\n                                                            17 columns and 1392 rows omitted\n\njulia> load_espn_qbr(\"week\") # by week\n9604×30 DataFrame\n  Row │ season  season_type  game_id    game_week  week_text  team_abb  player_id  name_sh ⋯\n      │ Int32?  String?      String?    Int32?     String?    String?   String?    String? ⋯\n──────┼─────────────────────────────────────────────────────────────────────────────────────\n    1 │   2006  Regular      260910009          1  Week 1     CHI       4480       R. Gros ⋯\n    2 │   2006  Regular      260910034          1  Week 1     PHI       1753       D. McNa\n    3 │   2006  Regular      260910010          1  Week 1     NYJ       2149       C. Penn\n    4 │   2006  Regular      260910019          1  Week 1     IND       1428       P. Mann\n    5 │   2006  Regular      260910029          1  Week 1     ATL       2549       M. Vick ⋯\n    6 │   2006  Regular      260907023          1  Week 1     PIT       1490       C. Batc\n    7 │   2006  Regular      260910027          1  Week 1     BAL       733        S. McNa\n    8 │   2006  Regular      260910030          1  Week 1     JAX       4465       B. Left\n    9 │   2006  Regular      260911028          1  Week 1     MIN       331        B. John ⋯\n   10 │   2006  Regular      260910017          1  Week 1     BUF       5547       J.P. Lo\n   11 │   2006  Regular      260911028          1  Week 1     WSH       445        M. Brun\n  ⋮   │   ⋮          ⋮           ⋮          ⋮          ⋮         ⋮          ⋮            ⋮ ⋱\n 9595 │   2024  Regular      401671659          1  Week 1     LAC       4038941    J. Herb\n 9596 │   2024  Regular      401671719          1  Week 1     TEN       4361418    W. Levi ⋯\n 9597 │   2024  Regular      401671761          1  Week 1     DAL       2577417    D. Pres\n 9598 │   2024  Regular      401671719          1  Week 1     CHI       4431611    C. Will\n 9599 │   2024  Regular      401671805          1  Week 1     GB        4036378    J. Love\n 9600 │   2024  Regular      401671712          1  Week 1     NYG       3917792    D. Jone ⋯\n 9601 │   2024  Regular      401671734          1  Week 1     CAR       4685720    B. Youn\n 9602 │   2024  Regular      401671761          1  Week 1     CLE       3122840    D. Wats\n 9603 │   2024  Regular      401671807          2  Week 2     BUF       3918298    J. Alle\n 9604 │   2024  Regular      401671807          2  Week 2     MIA       4241479    T. Tago ⋯\n                                                            23 columns and 9583 rows omitted","category":"page"},{"location":"loaders/#Data-dictionaries","page":"Loaders","title":"Data dictionaries","text":"","category":"section"},{"location":"loaders/","page":"Loaders","title":"Loaders","text":"Data dictionaries for almost every data resource available through a load_*() function is available on the {nflreadr} website.","category":"page"},{"location":"caching/#Caching","page":"Caching","title":"Caching","text":"","category":"section"},{"location":"caching/","page":"Caching","title":"Caching","text":"NFLData.jl uses Scratch.jl to cache previously loaded data objects on a local disk. This, in conjunction with Julia's Just-In-Time (JIT) compilation, makes reading data into Julia with this package extremely fast.","category":"page"},{"location":"caching/#Reading-data","page":"Caching","title":"Reading data","text":"","category":"section"},{"location":"caching/","page":"Caching","title":"Caching","text":"This section walks through how NFLData.jl loads data into Julia at a high level depending on the context that each function call exists in.","category":"page"},{"location":"caching/#Initial-function-call","page":"Caching","title":"Initial function call","text":"","category":"section"},{"location":"caching/","page":"Caching","title":"Caching","text":"When a user calls a load_*() function for the first time, the following process occurs:","category":"page"},{"location":"caching/","page":"Caching","title":"Caching","text":"The relevant resource is queried from the web.\nThe resource is downloaded to the Scratch space as a .parquet, .csv, or .csv.gz file.\nThe resource is read into the Julia workspace","category":"page"},{"location":"caching/","page":"Caching","title":"Caching","text":"julia> using NFLData\n\njulia> julia> @time load_rosters(2023);\n  3.156570 seconds (1.43 M allocations: 101.806 MiB, 41.90% gc time, 68.60% compilation time)","category":"page"},{"location":"caching/#Relying-on-JIT-Compilation","page":"Caching","title":"Relying on JIT Compilation","text":"","category":"section"},{"location":"caching/","page":"Caching","title":"Caching","text":"With JIT compiling, Julia keeps a record of all previous function calls in a Julia session. When a function is called with the same arguments as a previous function call in the session, Julia returns the cached object, rather than re-running the function from scratch.","category":"page"},{"location":"caching/","page":"Caching","title":"Caching","text":"julia> @time load_rosters(2023);\n  0.007354 seconds (56.84 k allocations: 6.774 MiB)","category":"page"},{"location":"caching/#Caching-2","page":"Caching","title":"Caching","text":"","category":"section"},{"location":"caching/","page":"Caching","title":"Caching","text":"However, calling the same function with different arguments will not result in the same speedup, because Julia does not recognize the new function call. This means that even if a call references the same data object, it can't cache that file from a previous function call in the workspace (for example, load_rosters(2022:2023) and load_rosters(2023:2024) both reference the same underlying rosters_2023.parquet file, but because the arguments passed to load_rosters(2022:2023) and load_rosters(2023:2024) are different, Julia will not rely on JIT compilation to speed up reading the roster_2023.parquet file into memory).","category":"page"},{"location":"caching/","page":"Caching","title":"Caching","text":"To resolve this issue, NFLData.jl checks if a referenced data resource already exists in the Scratch space, and  if it does, rather than re-downloading the file, it just reads the local version. For this example, this speeds up any function call that references a previously downloaded data object. Notice how a function call that references the previously cached 2023 roster file is faster than one that references roster files that were not previously cached.","category":"page"},{"location":"caching/","page":"Caching","title":"Caching","text":"julia> @time load_rosters(2020:2021); # none of these files have been cached before\n  1.399959 seconds (121.23 k allocations: 15.015 MiB)\n\njulia> @time load_rosters(2022:2023); # just the 2023 file has been cached\n  0.591959 seconds (115.24 k allocations: 14.204 MiB)","category":"page"},{"location":"caching/#Cache-management","page":"Caching","title":"Cache management","text":"","category":"section"},{"location":"caching/","page":"Caching","title":"Caching","text":"By default, NFLData.jl will clear out the cache if the oldest object in the cache is more than 24 hours old.","category":"page"},{"location":"caching/","page":"Caching","title":"Caching","text":"If you need to manually clear out the cache, you can run using NFLData; clear_cache().","category":"page"},{"location":"caching/","page":"Caching","title":"Caching","text":"To disable the caching behavior, you can run using NFLData; cache_data_pref(false) and restart your Julia session.","category":"page"},{"location":"#NFLData.jl","page":"Home","title":"NFLData.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A package for intelligently loading NFL data into Julia.","category":"page"},{"location":"","page":"Home","title":"Home","text":"NFLData.jl is a low-level data loader, designed to be a native Julia implementation of the popular {nflreadr} package. NFLData.jl makes a number of NFL data resources available quickly and handily in DataFrame format, while intelligently caching and updating these data sources to accomodate in-season changes.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"NFLData.jl is available from the Julia package registry, and can be installed with the following one liner.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg; Pkg.add(\"NFLData\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can also add the package using the Pkg.jl REPL. Open an interactive Julia session, then press ] to open the REPL, then run add NFLData.","category":"page"},{"location":"#Getting-Started","page":"Home","title":"Getting Started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"After installation, return to the Julia repl, and type:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using NFLData","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can now load data into your Julia environment. For example, to pull in NFL schedules since 1999, you can use load_schedules():","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> load_schedules()\n6978×46 DataFrame\n  Row │ game_id          season  game_type  week   gameday     weekday   gametime  away_te ⋯\n      │ String15         Int64   String3    Int64  Date        String15  Time      String3 ⋯\n──────┼─────────────────────────────────────────────────────────────────────────────────────\n    1 │ 1999_01_MIN_ATL    1999  REG            1  1999-09-12  Sunday    missing   MIN     ⋯\n    2 │ 1999_01_KC_CHI     1999  REG            1  1999-09-12  Sunday    missing   KC\n    3 │ 1999_01_PIT_CLE    1999  REG            1  1999-09-12  Sunday    missing   PIT\n    4 │ 1999_01_OAK_GB     1999  REG            1  1999-09-12  Sunday    missing   OAK\n    5 │ 1999_01_BUF_IND    1999  REG            1  1999-09-12  Sunday    missing   BUF     ⋯\n    6 │ 1999_01_SF_JAX     1999  REG            1  1999-09-12  Sunday    missing   SF\n    7 │ 1999_01_CAR_NO     1999  REG            1  1999-09-12  Sunday    missing   CAR\n    8 │ 1999_01_NE_NYJ     1999  REG            1  1999-09-12  Sunday    missing   NE\n    9 │ 1999_01_ARI_PHI    1999  REG            1  1999-09-12  Sunday    missing   ARI     ⋯\n   10 │ 1999_01_DET_SEA    1999  REG            1  1999-09-12  Sunday    missing   DET\n   11 │ 1999_01_BAL_STL    1999  REG            1  1999-09-12  Sunday    missing   BAL\n  ⋮   │        ⋮           ⋮         ⋮        ⋮        ⋮          ⋮         ⋮          ⋮   ⋱\n 6969 │ 2024_18_CHI_GB     2024  REG           18  2025-01-05  Sunday    13:00:00  CHI\n 6970 │ 2024_18_JAX_IND    2024  REG           18  2025-01-05  Sunday    13:00:00  JAX     ⋯\n 6971 │ 2024_18_SEA_LA     2024  REG           18  2025-01-05  Sunday    13:00:00  SEA\n 6972 │ 2024_18_LAC_LV     2024  REG           18  2025-01-05  Sunday    13:00:00  LAC\n 6973 │ 2024_18_BUF_NE     2024  REG           18  2025-01-05  Sunday    13:00:00  BUF\n 6974 │ 2024_18_MIA_NYJ    2024  REG           18  2025-01-05  Sunday    13:00:00  MIA     ⋯\n 6975 │ 2024_18_NYG_PHI    2024  REG           18  2025-01-05  Sunday    13:00:00  NYG\n 6976 │ 2024_18_CIN_PIT    2024  REG           18  2025-01-05  Sunday    13:00:00  CIN\n 6977 │ 2024_18_NO_TB      2024  REG           18  2025-01-05  Sunday    13:00:00  NO\n 6978 │ 2024_18_HOU_TEN    2024  REG           18  2025-01-05  Sunday    13:00:00  HOU     ⋯\n                                                            39 columns and 6957 rows omitted","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can load nflfastR play-by-play data into Julia with load_pbp(years). The function can take either one or multiple years as arguments, or you can pass true into the function to pull in all years of PBP data.","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> load_pbp(2023)\n49665×372 DataFrame\n   Row │ play_id   game_id          old_game_id  home_team  away_team  season_type  week   ⋯\n       │ Float64?  String?          String?      String?    String?    String?      Int32? ⋯\n───────┼────────────────────────────────────────────────────────────────────────────────────\n     1 │      1.0  2023_01_ARI_WAS  2023091007   WAS        ARI        REG               1 ⋯\n     2 │     39.0  2023_01_ARI_WAS  2023091007   WAS        ARI        REG               1\n     3 │     55.0  2023_01_ARI_WAS  2023091007   WAS        ARI        REG               1\n     4 │     77.0  2023_01_ARI_WAS  2023091007   WAS        ARI        REG               1\n     5 │    102.0  2023_01_ARI_WAS  2023091007   WAS        ARI        REG               1 ⋯\n     6 │    124.0  2023_01_ARI_WAS  2023091007   WAS        ARI        REG               1\n     7 │    147.0  2023_01_ARI_WAS  2023091007   WAS        ARI        REG               1\n     8 │    172.0  2023_01_ARI_WAS  2023091007   WAS        ARI        REG               1\n     9 │    197.0  2023_01_ARI_WAS  2023091007   WAS        ARI        REG               1 ⋯\n    10 │    220.0  2023_01_ARI_WAS  2023091007   WAS        ARI        REG               1\n    11 │    245.0  2023_01_ARI_WAS  2023091007   WAS        ARI        REG               1\n   ⋮   │    ⋮             ⋮              ⋮           ⋮          ⋮           ⋮         ⋮    ⋱\n 49656 │   4684.0  2023_22_SF_KC    2024021100   KC         SF         POST             22\n 49657 │   4709.0  2023_22_SF_KC    2024021100   KC         SF         POST             22 ⋯\n 49658 │   4734.0  2023_22_SF_KC    2024021100   KC         SF         POST             22\n 49659 │   4771.0  2023_22_SF_KC    2024021100   KC         SF         POST             22\n 49660 │   4759.0  2023_22_SF_KC    2024021100   KC         SF         POST             22\n 49661 │   4791.0  2023_22_SF_KC    2024021100   KC         SF         POST             22 ⋯\n 49662 │   4813.0  2023_22_SF_KC    2024021100   KC         SF         POST             22\n 49663 │   4835.0  2023_22_SF_KC    2024021100   KC         SF         POST             22\n 49664 │   4860.0  2023_22_SF_KC    2024021100   KC         SF         POST             22\n 49665 │   4881.0  2023_22_SF_KC    2024021100   KC         SF         POST             22 ⋯\n                                                          365 columns and 49644 rows omitted\n\njulia> load_pbp(2022:2023)\n99099×372 DataFrame\n   Row │ play_id   game_id          old_game_id  home_team  away_team  season_type  week   ⋯\n       │ Float64?  String?          String?      String?    String?    String?      Int32? ⋯\n───────┼────────────────────────────────────────────────────────────────────────────────────\n     1 │      1.0  2022_01_BAL_NYJ  2022091107   NYJ        BAL        REG               1 ⋯\n     2 │     43.0  2022_01_BAL_NYJ  2022091107   NYJ        BAL        REG               1\n     3 │     68.0  2022_01_BAL_NYJ  2022091107   NYJ        BAL        REG               1\n     4 │     89.0  2022_01_BAL_NYJ  2022091107   NYJ        BAL        REG               1\n     5 │    115.0  2022_01_BAL_NYJ  2022091107   NYJ        BAL        REG               1 ⋯\n     6 │    136.0  2022_01_BAL_NYJ  2022091107   NYJ        BAL        REG               1\n     7 │    172.0  2022_01_BAL_NYJ  2022091107   NYJ        BAL        REG               1\n     8 │    202.0  2022_01_BAL_NYJ  2022091107   NYJ        BAL        REG               1\n     9 │    230.0  2022_01_BAL_NYJ  2022091107   NYJ        BAL        REG               1 ⋯\n    10 │    254.0  2022_01_BAL_NYJ  2022091107   NYJ        BAL        REG               1\n    11 │    275.0  2022_01_BAL_NYJ  2022091107   NYJ        BAL        REG               1\n   ⋮   │    ⋮             ⋮              ⋮           ⋮          ⋮           ⋮         ⋮    ⋱\n 99090 │   4684.0  2023_22_SF_KC    2024021100   KC         SF         POST             22\n 99091 │   4709.0  2023_22_SF_KC    2024021100   KC         SF         POST             22 ⋯\n 99092 │   4734.0  2023_22_SF_KC    2024021100   KC         SF         POST             22\n 99093 │   4771.0  2023_22_SF_KC    2024021100   KC         SF         POST             22\n 99094 │   4759.0  2023_22_SF_KC    2024021100   KC         SF         POST             22\n 99095 │   4791.0  2023_22_SF_KC    2024021100   KC         SF         POST             22 ⋯\n 99096 │   4813.0  2023_22_SF_KC    2024021100   KC         SF         POST             22\n 99097 │   4835.0  2023_22_SF_KC    2024021100   KC         SF         POST             22\n 99098 │   4860.0  2023_22_SF_KC    2024021100   KC         SF         POST             22\n 99099 │   4881.0  2023_22_SF_KC    2024021100   KC         SF         POST             22 ⋯\n                                                          365 columns and 99078 rows omitted\n\njulia> load_pbp(true)\n1186651×372 DataFrame\n     Row │ play_id   game_id          old_game_id  home_team  away_team  season_type  week ⋯\n         │ Float64?  String?          String?      String?    String?    String?      Int3 ⋯\n─────────┼──────────────────────────────────────────────────────────────────────────────────\n       1 │     35.0  1999_01_ARI_PHI  1999091200   PHI        ARI        REG               ⋯\n       2 │     60.0  1999_01_ARI_PHI  1999091200   PHI        ARI        REG\n       3 │     82.0  1999_01_ARI_PHI  1999091200   PHI        ARI        REG\n       4 │    103.0  1999_01_ARI_PHI  1999091200   PHI        ARI        REG\n       5 │    126.0  1999_01_ARI_PHI  1999091200   PHI        ARI        REG               ⋯\n       6 │    150.0  1999_01_ARI_PHI  1999091200   PHI        ARI        REG\n       7 │    176.0  1999_01_ARI_PHI  1999091200   PHI        ARI        REG\n       8 │    197.0  1999_01_ARI_PHI  1999091200   PHI        ARI        REG\n       9 │    218.0  1999_01_ARI_PHI  1999091200   PHI        ARI        REG               ⋯\n      10 │    240.0  1999_01_ARI_PHI  1999091200   PHI        ARI        REG\n      11 │    260.0  1999_01_ARI_PHI  1999091200   PHI        ARI        REG\n    ⋮    │    ⋮             ⋮              ⋮           ⋮          ⋮           ⋮         ⋮  ⋱\n 1186642 │   4104.0  2024_02_TB_DET   2024091503   DET        TB         REG\n 1186643 │   4130.0  2024_02_TB_DET   2024091503   DET        TB         REG               ⋯\n 1186644 │   4155.0  2024_02_TB_DET   2024091503   DET        TB         REG\n 1186645 │   4162.0  2024_02_TB_DET   2024091503   DET        TB         REG\n 1186646 │   4187.0  2024_02_TB_DET   2024091503   DET        TB         REG\n 1186647 │   4210.0  2024_02_TB_DET   2024091503   DET        TB         REG               ⋯\n 1186648 │   4233.0  2024_02_TB_DET   2024091503   DET        TB         REG\n 1186649 │   4256.0  2024_02_TB_DET   2024091503   DET        TB         REG\n 1186650 │   4279.0  2024_02_TB_DET   2024091503   DET        TB         REG\n 1186651 │   4301.0  2024_02_TB_DET   2024091503   DET        TB         REG               ⋯\n                                                        366 columns and 1186630 rows omitted","category":"page"},{"location":"","page":"Home","title":"Home","text":"NFLData.jl is designed to quickly load large datasets into memory. Here, we load a clean Julia session and pull in all seasons of PBP data, containing 362 columns and, as of the time of writing this documentation, 1,186,638 plays.","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> @time pbp = load_pbp(true);\n 37.171214 seconds (59.72 M allocations: 10.669 GiB, 15.75% gc time, 24.79% compilation time: <1% of which was recompilation)\n","category":"page"},{"location":"","page":"Home","title":"Home","text":"Not bad for running on my pretty dinky work laptop (16 GB RM, Intel Core i7-1270P processor)!","category":"page"},{"location":"#Caching","page":"Home","title":"Caching","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"NFLData.jl relies on Julia's JIT compilation to speed up running large objects into memory. However, JIT compiliation does not persist across sessions. NFLData.jl uses Scratch.jl to cache the data objects referenced across sessions, so subsequent calls that reference the same data objects are faster even if the call comes from a different Julia session. To learn more about this behavior, please visit the Caching chapter of this docomentation.","category":"page"},{"location":"additional/#Additional-Football-Analytics-Resources","page":"NFLVerse and additional resources","title":"Additional Football Analytics Resources","text":"","category":"section"},{"location":"additional/","page":"NFLVerse and additional resources","title":"NFLVerse and additional resources","text":"NFLData.jl is a part of the nflverse, a series of open source packages across R, Python, and Julia for football analytics research. To learn more about the nflverse, visit our website here. The nflverse is not affiliated or endorsed by the NFL.","category":"page"},{"location":"additional/","page":"NFLVerse and additional resources","title":"NFLVerse and additional resources","text":"If you have questions about using NFLData.jl, please join the nflverse discord. There is a dedicated NFLData.jl channel within the discord, though there are also channels for asking general questions about football analytics.","category":"page"},{"location":"additional/","page":"NFLVerse and additional resources","title":"NFLVerse and additional resources","text":"If you encounter any bugs or issues while using NFLData.jl, please open an issue on GitHub. We will do our best to address any issues or bugs in a timely manner, though please be patient–the nflverse packages are free and open source software that we develop in our spare time, without any compensation, so sometimes our real jobs or personal lives may take precedence over bug fixes!","category":"page"},{"location":"helpers/#Helpers","page":"Utilities","title":"Helpers","text":"","category":"section"},{"location":"helpers/","page":"Utilities","title":"Utilities","text":"Some helper functions are made available in NFLData.jl for use in loading and cleaning data. Not all helper functions that are available in {nflreadr} have been translated to NFLData.jl, such as nflreadr::join_coalesce()–these functions are general enough that they are considered beyond the scope of this package.","category":"page"},{"location":"helpers/","page":"Utilities","title":"Utilities","text":"clean_player_names(player_name::String; lowercase::Bool = false, convert_lastfirst::Bool = true, use_name_database::Bool = true, convert_to_ascii::Bool = true)","category":"page"},{"location":"helpers/#NFLData.helpers.clean_player_names-Tuple{String}","page":"Utilities","title":"NFLData.helpers.clean_player_names","text":"clean_player_names(player_name::String; lowercase::Bool = false, convert_lastfirst::Bool = true, use_name_database::Bool = true, convert_to_ascii::Bool = true)\n\nClean up player names for merges. Can convert names to lowercase, swap first/last names, remove diacritics, and also rely on manual overrides as specified by nflverse devs.\n\nExamples\n\njulia> clean_player_names(\"Tom Brady\") \n\"Tom Brady\"\n\njulia> clean_player_names(\"Melvin Gordon Jr.\")\n\"Melvin Gordon\"\n\njulia> clean_player_names(\"Melvin Gordon Jr.\",lowercase = true)\n\"melvin gordon\"\n\njulia> clean_player_names(\"Alexander Armah\")\n\"Alex Armah\"\n\njulia> clean_player_names(\"Moritz Böhringer\")\n\"Moritz Bohringer\"\n\njulia> clean_player_names(\"Gordon Jr., Melvin\", convert_lastfirst = true)\n\"Melvin Gordon\"\n\n\n\n\n\n","category":"method"},{"location":"helpers/","page":"Utilities","title":"Utilities","text":"clean_homeaway(dataframe::AbstractDataFrame;invert=missing)","category":"page"},{"location":"helpers/#NFLData.helpers.clean_homeaway-Tuple{AbstractDataFrame}","page":"Utilities","title":"NFLData.helpers.clean_homeaway","text":"clean_homeaway(dataframe::AbstractDataFrame;invert = missing)\n\nTake a dataframe that is formatted with one record for a game between two teams and pivot it such that there exists two records per game, one for each team.\n\nColumns should be formatted such that any columns for data belonging to the home team are prefixed or suffixed with \"home\" and \"home\", likewise for away teams.\n\nPass in a list of columns to invert to have these values multiplied by -1 before being returned to the new dataframe (such as margin of victory, which may be +7 for a home team and -7 for an away team in a given game).\n\n\n\n\n\n","category":"method"},{"location":"helpers/","page":"Utilities","title":"Utilities","text":"most_recent_season(roster::Bool = false)","category":"page"},{"location":"helpers/#NFLData.gameinfo.most_recent_season","page":"Utilities","title":"NFLData.gameinfo.most_recent_season","text":"most_recent_season(roster::Bool = false)\n\nReturn the most recent NFL season (including in-progress season).\n\nIf roster=true, the upcoming NFL season is returned if the system date is March 15th or later. Defaults to false.\n\n\n\n\n\n","category":"function"},{"location":"helpers/","page":"Utilities","title":"Utilities","text":"get_current_week(use_date::Bool = false)","category":"page"},{"location":"helpers/#NFLData.gameinfo.get_current_week","page":"Utilities","title":"NFLData.gameinfo.get_current_week","text":"get_current_week(use_date::Bool = false)\n\nReturn the current/upcoming week of the NFL season. Uses the schedules by default, can be swapped to use date-based heuristics by passing use_date=true.\n\nExamples\n\njulia>  # if using Dates; today() == \"2024-09-15\"\n\njulia>get_current_week()\n2\n\n\n\n\n\n","category":"function"},{"location":"helpers/","page":"Utilities","title":"Utilities","text":"clean_team_abbrs(team::String; current_location::Bool = true, keep_non_matches::Bool = true)","category":"page"},{"location":"helpers/#NFLData.helpers.clean_team_abbrs-Tuple{String}","page":"Utilities","title":"NFLData.helpers.clean_team_abbrs","text":"clean_team_abbrs(team::String; current_location::Bool = true, keep_non_matches::Bool = true)\n\nClean abbreviations of teams to NFLverse friendly abbreviations.\n\nExamples\n\njulia> clean_team_abbrs(\"SD\")\n\"LAC\"\n\n\n\n\n\n","category":"method"},{"location":"helpers/","page":"Utilities","title":"Utilities","text":"nflverse_game_id(season::Number,week::Number,away::String,home::String)","category":"page"},{"location":"helpers/#NFLData.helpers.nflverse_game_id-Tuple{Number, Number, String, String}","page":"Utilities","title":"NFLData.helpers.nflverse_game_id","text":"nflverse_game_id(season::Number,week::Number,away::String,home::String)\n\nCheck and calculate an nflverse game ID.\n\nExamples\n\njulia> nflverse_game_id(2022, 2, \"LAC\", \"KC\")\n\"2022_02_LAC_KC\"\n\n\n\n\n\n","category":"method"}]
}
